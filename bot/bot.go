package bot

import (
	"fmt"
	"log"
	"share_bot/db"
	"strings"

	"github.com/NicoNex/echotron/v3"
)

const rubleCode rune = '‚ÇΩ'
const receiptCode rune = 'üßæ'

const toWhomCommandText string = "–ö–æ–º—É –¥–æ–ª–∂–µ–Ω —è?"
const whoMeCommandText string = "–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –º–Ω–µ?"

var keyboard = echotron.ReplyKeyboardMarkup{
	ResizeKeyboard: true,
	Keyboard: [][]echotron.KeyboardButton{
		{
			{Text: whoMeCommandText},
			{Text: toWhomCommandText},
		},
	},
}

type bot struct {
	chatID int64
	echotron.API
}

var (
	tokenBot    string
	usernameBot string
)

func Start(token string, username string) {
	tokenBot = token
	usernameBot = username
	dsp := echotron.NewDispatcher(tokenBot, newBot)
	log.Println(dsp.Poll())
}

func newBot(chatID int64) echotron.Bot {
	return &bot{
		chatID,
		echotron.NewAPI(tokenBot),
	}
}

func (b *bot) Update(update *echotron.Update) {
	if update.Message.Text == "/start" && update.Message.Chat.Type == "private" {
		user := db.User{
			Username:   update.Message.From.Username,
			TelegramId: update.Message.From.ID,
		}
		db.InitUser(user)
		name := update.Message.From.FirstName
		if name == "" {
			name = user.Username
		}
		b.SendMessage(fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %v!
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏ —Ç–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –Ω–µ –∑–∞–±—ã—Ç—å –æ–± –æ–±—â–∏—Ö —Ç—Ä–∞—Ç–∞—Ö –¥—Ä—É–≥ –¥—Ä—É–≥–∞.

* –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:
/add @nickname_–¥—Ä—É–≥–∞ —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–æ–ø–∏—Å—ã–≤–∞—é—â–∏–π_—Ç—Ä–∞—Ç—É
* –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: 
/return @nickname_–¥—Ä—É–≥–∞ —Å—É–º–º–∞
* –ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É.

–ù–∞—á–Ω–µ–º?`, name), b.chatID, &echotron.MessageOptions{
			// ReplyMarkup: echotron.ReplyKeyboardRemove{
			// 	RemoveKeyboard: true,
			// 	Selective:      false,
			// },
			ReplyMarkup: keyboard,
		})
	} else if update.Message != nil {

		switch {
		case strings.HasPrefix(update.Message.Text, "/add"):
			addCommand(b, update)
		case strings.HasPrefix(update.Message.Text, "/return"):
			//returnCommand(b, update)
		case strings.HasPrefix(update.Message.Text, whoMeCommandText):
			//whoMeCommand(b, update)
		case strings.HasPrefix(update.Message.Text, toWhomCommandText):
			toWhomCommand(b, update)
		default:
			return
		}
	}
}
